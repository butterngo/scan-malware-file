namespace AzureAntiMalware
{
    using Infrastructure;
    using Infrastructure.Extensions;
    using Infrastructure.Models;
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public class ClientScanFileService : IScanFileService
    {
        private readonly HttpClient _client;

        private const string ScanEndPoint = "/ScanMalwares";

        public ClientScanFileService(string host)
        {
            _client = new HttpClient();

            _client.BaseAddress = new Uri(host);
        }

        public async Task<ScanResultModel> ScanFileAsync(byte[] bytes,
            CancellationToken cancellationToken = default) 
            => await SendAsync(bytes);

        public async Task<ScanResultModel> ScanFileAsync(Stream sourceStream,
            CancellationToken cancellationToken = default)
        => await SendAsync(sourceStream.ToBytes());

        public async Task<ScanResultModel> ScanFileAsync(string path,
            CancellationToken cancellationToken = default)
        => await SendAsync(path.ToBytes());

        private MultipartFormDataContent CreateMultipartFormDataContent(byte[] bytes)
        {
            MultipartFormDataContent multiContent = new MultipartFormDataContent();

            multiContent.Add(new ByteArrayContent(bytes), "file", Guid.NewGuid().ToString("n"));

            return multiContent;
        }

        private async Task<ScanResultModel> SendAsync(byte[] bytes)
        {
            MultipartFormDataContent multiContent = new MultipartFormDataContent();

            multiContent.Add(new ByteArrayContent(bytes), "file", Guid.NewGuid().ToString("n"));

            var response = await _client.PostAsync(ScanEndPoint, multiContent);

            response.EnsureSuccessStatusCode();

            return await response.Content.ReadAsAsync<ScanResultModel>();
        }
    }
}
