namespace AzureAntiMalware
{
    using Infrastructure;
    using Infrastructure.Exceptions;
    using Infrastructure.Models;
    using MalwareScan.AMSI;
    using System;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    public class ServerScanFileService: IScanFileService
    {
        private readonly MalwareScanner _amsiService;

        private readonly string _defaultFileName;

        public ServerScanFileService() : this("MyAppViruscanner") { }

        public ServerScanFileService(string applicationName)
        {
            _amsiService = new MalwareScanner(applicationName);

            _defaultFileName = System.Guid.NewGuid().ToString("n");
        }

        public async Task<ScanResultModel> ScanFileAsync(byte[] bytes, CancellationToken cancellationToken = default)
        {
            return await SendAsync(() => _amsiService.HasVirus(bytes, _defaultFileName));
        }

        public async Task<ScanResultModel> ScanFileAsync(Stream sourceStream, CancellationToken cancellationToken = default)
        {
            return await SendAsync(() => _amsiService.HasVirus(sourceStream, _defaultFileName));
        }

        public Task<ScanResultModel> ScanFileAsync(string path, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        private Task<ScanResultModel> SendAsync(Func<bool> calback)
        {
            var result = _amsiService.TestIfItIsWorking();

            if (!result.IsItWorking)
            {
                File.WriteAllText(@"C:\publish\log.txt", result.ErrorMessage);
                
               throw new ScanFileException(result.ErrorMessage);
            } 

            return Task.FromResult(new ScanResultModel
            {
                HasVirus = calback()
            });
        }
    }
}
