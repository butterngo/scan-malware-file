namespace CLAMAV
{
    using Infrastructure;
    using Infrastructure.Exceptions;
    using Infrastructure.Models;
    using nClam;
    using System;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    public class ScanFileService : IScanFileService
    {
        private readonly ClamClient _clamClient;

        private string _host;

        private int _port;

        public ScanFileService(string host, int port)
        {
            _host = host; _port = port;

            _clamClient = new ClamClient(host, port);
        }

        public async Task<ScanResultModel> ScanFileAsync(byte[] bytes, CancellationToken cancellationToken = default)
        {
            return await SendAsync(async () => await _clamClient.SendAndScanFileAsync(bytes, cancellationToken));
        }

        public async Task<ScanResultModel> ScanFileAsync(Stream sourceStream, CancellationToken cancellationToken = default)
        {
            return await SendAsync(async ()=> await _clamClient.SendAndScanFileAsync(sourceStream, cancellationToken));
        }

        public async Task<ScanResultModel> ScanFileAsync(string path, CancellationToken cancellationToken = default)
        {
            return await SendAsync(async () => await _clamClient.SendAndScanFileAsync(path, cancellationToken));
        }

        private async Task<ScanResultModel> SendAsync(Func<Task<ClamScanResult>> calback)
        {
            if (!await _clamClient.PingAsync()) throw new ScanFileException($"Connection refuse from {_host}:{_port}");

            return MapScanResult(await calback());
        }

        private ScanResultModel MapScanResult(ClamScanResult scanResult)
        {
            var result = new ScanResultModel();
            switch (scanResult.Result)
            {
                case ClamScanResults.Unknown:
                    result.Message = "Could not scan file";
                    result.HasVirus = true;
                    break;
                case ClamScanResults.Clean:
                    result.Message = "No Virus found";
                    result.HasVirus = false;
                    break;
                case ClamScanResults.VirusDetected:
                    result.VirusName = scanResult.InfectedFiles.First().VirusName;
                    result.Message = "Virus found: " + scanResult.InfectedFiles.First().VirusName;
                    result.HasVirus = true;
                    break;
                case ClamScanResults.Error:
                    result.Message = string.Format("VIRUS SCAN ERROR! {0}", scanResult.RawResult);
                    result.HasVirus = true;
                    break;
            }
            return result;
        }
    }
}
